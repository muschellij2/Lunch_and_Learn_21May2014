library(devtools)
install_github("glmer2stan", "rmcelreath")
library(lme4)
library(glmer2stan)
data(sleepstudy) # built into lme4
m1_lme4 <- lmer( Reaction ~ Days + (Days | Subject), sleepstudy, REML=FALSE )
construct subject index --- glmer2stan forces you to manage your own cluster indices
sleepstudy$subject_index <- as.integer(as.factor(sleepstudy$Subject))
fit with glmer2stan
m1_g2s <- lmer2stan( Reaction ~ Days + (Days | subject_index), data=sleepstudy )
install.packages("rstan")
install.packages('inline')
install.packages('Rcpp')
options(repos = c(getOption("repos"), rstan = "http://wiki.rstan-repo.googlecode.com/git/"))
install.packages('rstan', type = 'source')
x <- rnorm(100, mean=5, sd=2)
hist(x, main="Histogram of Normal", density=TRUE)
d <- density(x)
?hist
x <- rnorm(100, mean=5, sd=2)
hist(x, main="Histogram of Normal", freq=FALSE)
d <- density(x)
lines(d)
x <- rnorm(100, mean=5, sd=2)
hist(x, main="Histogram of Normal", freq=FALSE, color="red")
d <- density(x)
lines(d, color="green", lwd=2)
x <- rnorm(100, mean=5, sd=2)
hist(x, main="Histogram of Normal", freq=FALSE, col="red")
d <- density(x)
lines(d, col="green", lwd=2)
generate normal data, plot a histogram and draw a smoothed density
x = rnorm(100, mean=5, sd=2)
= assigns (aka creates R things (call them objects or variables) that can be used)
hist(x, main="Histogram of Normal", freq=FALSE, col="red")
hist is a function for plotting
d <- density(x) # <- assigns, let's make a "density estimate" (think of it as a smoothed histogram)
lines(d, col="green", lwd=2) ## let's add it to the plot
library(rgl)
?contour3d
library(misc3d)
?contour3d
library(rgl)
?writeOBJ
?writeSTL
?writeWebGL
library(misc3d); ?contour3d
system.time({
Example 4: Separate the triangles from the contours of
mixture of three tri-variate normal densities
nmix3 <- function(x, y, z, m, s) {
0.3*dnorm(x, -m, s) * dnorm(y, -m, s) * dnorm(z, -m, s) +
0.3*dnorm(x, -2*m, s) * dnorm(y, -2*m, s) * dnorm(z, -2*m, s) +
0.4*dnorm(x, -3*m, s) * dnorm(y, -3 * m, s) * dnorm(z, -3*m, s) }
f <- function(x,y,z) nmix3(x,y,z,0.5,.1)
n <- 20
x <- y <- z <- seq(-2, 2, len=n)
contour3dObj <- contour3d(f, 0.35, x, y, z, draw=FALSE, separate=TRUE)
for(i in 1:length(contour3dObj))
contour3dObj[[i]]$color <- rainbow(length(contour3dObj))[i]
drawScene.rgl(contour3dObj)
})
rm(list=ls())
library(XML)
library(RJSONIO)
library(stringr)
u <- "http://311.baltimorecity.gov/open311/v2/requests.json?api_key=d90fdaff7eae3dec932ab23313c54da8&jurisdiction_id=baltimorecity.gov&service_code=4e39a3abd3e2c20ed800001d"
test data set
u <- "http://311test.baltimorecity.gov/open311/v2/requests.json?api_key=d90fdaff7eae3dec932ab23313c54da8&jurisdiction_id=baltimorecity.gov&service_code=4e39a3abd3e2c20ed800001d"
ff <- url(u)
ff <- url()
x <- readLines(ff)
close(ff)
J <- fromJSON(x, asText=TRUE )
cnames <- c("service_request_id", "token", "status","service_name", "service_code", "description", "requested_datetime", "updated_datetime", "lat", "long", "address", "status_notes", "media_url")
J <- lapply(J, function(x) {
if (! "address" %in% names(x)) x <- c(x, address=NA)
if (! "status_notes" %in% names(x)) x <- c(x, status_notes=NA)
x <- x[!names(x) %in% "media_url"]
x <- x[cnames]
x
})
data <- data.frame(do.call("rbind", J), stringsAsFactors=FALSE)
colnames(data) <- cnames
for (icol in cnames) {
x <- data[, icol]
if (class(x) == "list") {
print(icol)
x <- sapply(x, function(dd) ifelse(is.null(dd), NA, dd))
data[, icol] <- unlist(x)
}
data[,icol][data[,icol] == ""] <- NA
}
data$description <- str_trim(data$description)
data$address <- toupper(data$address)
data$description <- toupper(data$description)
ss <- strsplit(data$)
pot <- data[grepl("OMBARD", data$address) | grepl("OLLING", data$address) |
grepl("OMBARD", data$description) | grepl("OLLING", data$description) |
grepl("ANN", data$description) | grepl("BROADWAY", data$description) |
grepl("PRATT", data$description) | grepl("BLUE", data$description) |
grepl("TRUCK", data$description) |
is.na(data$description), c("status", "description", "address", "updated_datetime",
"requested_datetime", "status_notes", "media_url")]
pot$Req_Date <- as.Date(substr(pot$requested_datetime, 1, 10), "%Y-%m-%d")
pot$Req_Year <- as.numeric(substr(pot$requested_datetime, 1, 4))
pot <- pot[!(pot$status %in% "closed"), ]
pot <- pot[!grepl("MOTORCYCLE", pot$description) | !grepl("SONATA", pot$description), ]
pot <- pot[pot$status == "open", ]
print(pot)
print(head(pot))
rm(list=ls())
library(XML)
library(RJSONIO)
library(stringr)
u <- "http://311.baltimorecity.gov/open311/v2/requests.json?api_key=d90fdaff7eae3dec932ab23313c54da8&jurisdiction_id=baltimorecity.gov&service_code=4e39a3abd3e2c20ed800001d"
test data set
u <- "http://311test.baltimorecity.gov/open311/v2/requests.json?api_key=d90fdaff7eae3dec932ab23313c54da8&jurisdiction_id=baltimorecity.gov&service_code=4e39a3abd3e2c20ed800001d"
ff <- url(u)
ff <- url()
x <- readLines(ff)
close(ff)
J <- fromJSON(x, asText=TRUE )
cnames <- c("service_request_id", "token", "status","service_name", "service_code", "description", "requested_datetime", "updated_datetime", "lat", "long", "address", "status_notes", "media_url")
J <- lapply(J, function(x) {
if (! "address" %in% names(x)) x <- c(x, address=NA)
if (! "status_notes" %in% names(x)) x <- c(x, status_notes=NA)
x <- x[!names(x) %in% "media_url"]
x <- x[cnames]
x
})
data <- data.frame(do.call("rbind", J), stringsAsFactors=FALSE)
colnames(data) <- cnames
for (icol in cnames) {
x <- data[, icol]
if (class(x) == "list") {
print(icol)
x <- sapply(x, function(dd) ifelse(is.null(dd), NA, dd))
data[, icol] <- unlist(x)
}
data[,icol][data[,icol] == ""] <- NA
}
data$description <- str_trim(data$description)
data$address <- toupper(data$address)
data$description <- toupper(data$description)
ss <- strsplit(data$)
pot <- data[grepl("OMBARD", data$address) | grepl("OLLING", data$address) |
grepl("OMBARD", data$description) | grepl("OLLING", data$description) |
grepl("ANN", data$description) | grepl("BROADWAY", data$description) |
grepl("PRATT", data$description) | grepl("BLUE", data$description) |
grepl("TRUCK", data$description) |
is.na(data$description), c("status", "description", "address", "updated_datetime",
"requested_datetime", "status_notes", "media_url")]
pot$Req_Date <- as.Date(substr(pot$requested_datetime, 1, 10), "%Y-%m-%d")
pot$Req_Year <- as.numeric(substr(pot$requested_datetime, 1, 4))
pot
library(data.table)
DT <- data.table(x=1:5, y=6:10, z=11:15)
DT[, m := log2( (x+1) / (y+1) )]
DT
DT[, x, y z]
DT[, c(x, y, z)]
DT[, x, y, z]
DT[, list(x, y, z)]
library(data.table); library(microbenchmark)
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 <- data.table(x=c('a', 'b', 'dt2'), z=5:7)
setkey(DT1, x)
setkey(DT2, x)
merge(DT1, DT2, all.x=TRUE)
DT1
DT2
library(data.table); library(microbenchmark)
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 <- data.table(x=c('a', 'b', 'dt2'), z=5:7)
setkey(DT1, x)
setkey(DT2, x)
d3 = merge(DT1, DT2, all.x=TRUE)
d3
install.packages("microbenchmark")
library(data.table); library(microbenchmark)
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 <- data.table(x=c('a', 'b', 'dt2'), z=5:7)
setkey(DT1, x)
setkey(DT2, x)
merge(DT1, DT2, all.x=TRUE)
d3
library(data.table); library(microbenchmark)
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 <- data.table(x=c('a', 'b', 'dt2'), z=5:7)
setkey(DT1, x)
setkey(DT2, x)
d3 = merge(DT1, DT2, all.x=TRUE)
d3
DT2
DT1
?write.foreign
?write.dta
library(foreign)
update.packages("foreign")
library(foreign)
library(sas7bdat)
help(package="sas7bdat")
library(oro.dicom)
?readDICOM
?readDICOMFile
?readDICOM
?readDICOMFile
readDICOMFile
?readDICOM
dcmImage <- readDICOM(system.file("hk-40", package="oro.dicom"),
verbose=TRUE)
system.file("hk-40", package="oro.dicom"),
system.file("hk-40", package="oro.dicom")
?readDICOMFile
x <- rereadDICOMFile(system.file("dcm/Abdo.dcm", package="oro.dicom"))
graphics::image(t(x$img), col=grey(0:64/64), axes=FALSE, xlab="", ylab="",
main="Abdo.dcm")
dcm <- readDICOM(system.file("dcm/", package="oro.dicom"))
make.numeric <- function(x) {
if (is.factor(x)) x <- as.character(x)
oldx <- x
x[x == ""] <- NA
if (all(is.na(x))) return(oldx)
## if they all are real - turn to numeric
suppressWarnings(num_x <- as.numeric(x))
keep <- !(is.na(x) & is.na(num_x))
### if all numeric
if (any(is.na(num_x[keep]))) {
return(oldx)
} else {
return(num_x)
}
}
dicom_header_parse = function(hdr, tryConvert=TRUE){
nfiles = length(hdr)
all.names = unique(unlist(lapply(hdr, function(x) x[, "name"])))
n.names = length(all.names)
mat = matrix(NA, nrow=nfiles, ncol=n.names)
colnames(mat) = all.names
for (ifile in seq(nfiles)){
x = hdr[[ifile]]
val = x[, c("value")]
nn = names(val) = x[, "name"]
mat[ifile, nn] = val[nn]
}
mat = data.frame(mat, stringsAsFactors=FALSE)
if (tryConvert) {
for (icol in seq(n.names)){
mat[,icol] = make.numeric(mat[, icol])
}
}
rownames(mat) = names(hdr)
return(mat)
}
hdr.df = dicom_header_parse(dcm$hdr, tryConvert=TRUE)
hdr.df
dcm <- readDICOM(system.file("dcm", package="oro.dicom"))
hdr.df = dicom_header_parse(dcm$hdr, tryConvert=TRUE)
hdr.df
hdr.df[, c("GantryTilt", "ImageOrientationPatient")]
hdr.df$ImageType
hdr.df[, c("ImageType", "ImageOrientationPatient")]
names(hdr.df)
hdr.df[, c("ImageType", "AcquisitionTime")]
hdr.df[, c("ImageType", "HeartRate")]
hdr.df[, c("ImageType", "SeriesDescription", "StudyDescription")]
par(mfrow=c(1, 3))
fnames = basename(rownames(hdr.df))
fnames
par(mfrow=c(1, 3))
graphics::image(t(dcm$img[[1]]), col=grey(0:64/64), axes=FALSE, xlab="", ylab="",
main=fnames[1])
graphics::image(t(dcm$img[[2]]), col=grey(0:64/64), axes=FALSE, xlab="", ylab="",
main=fnames[2])
graphics::image(t(dcm$img[[3]]), col=grey(0:64/64), axes=FALSE, xlab="", ylab="",
main=fnames[3])
help(package="oro.dicom")
### from the readDICOMFile help file (adapted)
dcm <- readDICOM(system.file("dcm", package="oro.dicom"))
head(hdr[[1]])
dcm <- readDICOM(system.file("dcm", package="oro.dicom"))
hdr = dcm$hdr
head(hdr[[1]])
class(hdr[[1]])
head(hdr[[2]])
tail(hdr[[2]])
tail(hdr[[1]])
hdr[[1]][ hdr[[1]]$name == "HighBit", "value" ]
hdr[[2]][ hdr[[2]]$name == "HighBit", "value" ]
hdr[[2]][ hdr[[2]]$name == "HighBit",]
make.numeric <- function(x) {
if (is.factor(x)) x <- as.character(x)
oldx <- x
x[x == ""] <- NA
if (all(is.na(x))) return(oldx)
## if they all are real - turn to numeric
suppressWarnings(num_x <- as.numeric(x))
keep <- !(is.na(x) & is.na(num_x))
### if all numeric
if (any(is.na(num_x[keep]))) {
return(oldx)
} else {
return(num_x)
}
}
nfiles = length(hdr)
all.names = unique(unlist(lapply(hdr, function(x) x[, "name"])))
n.names = length(all.names)
mat = matrix(NA, nrow=nfiles, ncol=n.names)
colnames(mat) = all.names
x = hdr[[ifile]]
ifile = 2;
x = hdr[[ifile]]
val = x[, c("value")]
nn = names(val) = x[, "name"]
nn
mat[ifile, nn] = val[nn]
nn
mat[ifile, "HighBit"]
x[, "name"]
x = hdr[[ifile]]
val = x[, c("value")]
nn = names(val) = x[, "name"]
val[nn]
val["HighBit"]
val[c("HighBit", "HighBit")]
x = hdr[[ifile]]
val = x[, c("value")]
val[c("HighBit", "HighBit")]
val[, 132]
val[132]
x[, "name"]
nn = names(val) = x[, "name"]
source('~/.active-rstudio-document', echo=TRUE)
### get all unique fields
nfiles = length(hdr)
all.names = unique(unlist(lapply(hdr, function(x) x[, "name"])))
n.names = length(all.names)
## create a matrix to fill in
mat = matrix(NA, nrow=nfiles, ncol=n.names)
colnames(mat) = all.names
xnames = x[, "name"]
xnames
duplicated(xnames)
if (stop.dups) stopifnot(all(!duplicated(xnames)))
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
require(knitrBootstrap)
knit_bootstrap_md(input=inputFile, output=outputFile)
}
)
?as.numeric
fsldir <- system("echo $FSLDIR", intern=TRUE)
fsldir
library(ggvis)
library(devtools)
install_github("ggvis")
install_github("ggvis")
install_github("ggvis")
install_github("ggvis", "rstudio")
devtools::install_github("hadley/testthat")
library(ggvis)
ggvis(mtcars, props(x = ~wt, y = ~mpg)) + mark_symbol()
ggvis(mtcars, props(x = ~factor(cyl), y = ~mpg)) + mark_symbol()
ggvis(props(x = ~wt, y = ~mpg)) +
mark_symbol(props(stroke := "black", fill := "black"), mtc1) +
mark_symbol(props(fill := "red", size := 40), mtc2)
mtc1 <- mtcars[1:10, ]
mtc2 <- mtcars[11:20, ]
ggvis(props(x = ~wt, y = ~mpg)) +
mark_symbol(props(stroke := "black", fill := "black"), mtc1) +
mark_symbol(props(fill := "red", size := 40), mtc2)
# Slider input in transform_smooth
ggvis(mtcars, props(x = ~wt, y = ~mpg)) +
mark_symbol() +
branch_smooth(method = "loess", formula = y ~ x,
span = input_slider(0.2, 1, step = 0.05, label = "span")
)
# Slider input in transform_smooth
ggvis(mtcars, props(x = ~wt, y = ~mpg)) +
mark_symbol() +
branch_smooth(method = "loess", formula = y ~ x,
span = input_slider(0.2, 1, step = 0.05, label = "span")
)
ggvis(mtcars, props(x = ~wt)) +
branch_density(
adjust = input_slider(.1, 2, value = 1, step = .1, label = "Bandwidth adjustment"),
kernel = input_select(
c("Gaussian" = "gaussian", "Epanechnikov" = "epanechnikov",
"Rectangular" = "rectangular", "Triangular" = "triangular",
"Biweight" = "biweight", "Cosine" = "cosine", "Optcosine" = "optcosine"),
label = "Kernel")
)
library(knitr)
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
options(WordpressLogin = c(strictlystat = 'hopkinsstat'))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = paste0('http://hopstat.wordpress.com/xmlrpc.php'))
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
### change this for the new folder
folname <- "Changing_Tab_Names"
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
stopifnot(file.exists(rmdname))
opts_knit$set(base.url = paste0('https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
base.dir = wpdir)
knit2wp(rmdname,
title = 'Changing Terminal Tab Names', shortcode=TRUE)
install.packages("swirl")
swirl()
library(swirl)
swirl()
nxt()
library(ggplot2)
tot=as.data.frame(rep(seq(-50,50,5),each=21))
names(tot)="precip"
temp=rep(seq(-5,5,0.5),21)
tot$temp=temp
disc=array(dim=c(21,21))
for(i in 1:21){
for(y in 1:21){
temp<- rev(seq(10000+((i-1)*500),12000+((i-1)*500),100))
disc[i,y]=temp[y]
}}
disc1=t(disc)
bla=as.vector(disc1)
tot$dis=bla
cols=c("darkred"," white"," darkblue")
p <- ggplot(tot, aes(x=temp, y=precip,group=dis))
p+geom_tile(aes(fill=dis)) + scale_fill_gradientn(colours=cols)
p+geom_tile(aes(fill=dis)) + scale_fill_gradientn(colours=cols) +   opts(
panel.grid.major = theme_line(size = 0.5, colour = '#1391FF'),
panel.grid.minor = theme_line(colour = NA),
panel.background = theme_rect(colour = NA),
axis.ticks = theme_segment(colour = NA)
)
p+geom_tile(aes(fill=dis)) + scale_fill_gradientn(colours=cols) + theme(
panel.grid.major = theme_line(size = 0.5, colour = '#1391FF'),
panel.grid.minor = theme_line(colour = NA),
panel.background = theme_rect(colour = NA),
axis.ticks = theme_segment(colour = NA)
)
p <- ggplot(tot, aes(x=temp, y=precip,group=dis))
p+geom_tile(aes(fill=dis)) + scale_fill_gradientn(colours=cols) + theme(
panel.grid.major = theme_line(size =0),
panel.grid.minor = theme_line(size = 0,colour = NA),
panel.background = theme_rect(size = 0, colour = NA),
axis.ticks = theme_segment(colour = NA)
)
library(knitr)
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
options(WordpressLogin = c(strictlystat = 'hopkinsstat'))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = paste0('http://hopstat.wordpress.com/xmlrpc.php'))
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
### change this for the new folder
folname <- "Grad_School_Interview"
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
stopifnot(file.exists(rmdname))
opts_knit$set(base.url = paste0('https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
base.dir = wpdir)
knit2wp(rmdname,
title = 'A Graduate School Open House: Words from a Student', shortcode=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(knitr)
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
options(WordpressLogin = c(strictlystat = 'hopkinsstat'))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = paste0('http://hopstat.wordpress.com/xmlrpc.php'))
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
### change this for the new folder
folname <- "Grad_School_Interview"
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
stopifnot(file.exists(rmdname))
opts_knit$set(base.url = paste0('https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
base.dir = wpdir)
knit2wp(rmdname,
title = 'A Graduate School Open House: Words from a Student', shortcode=TRUE)
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
setwd("~/CT_Registration/")
author("CT_Pres")
slidify("index.Rmd")
slide <- function(fname) {
require(slidify)
require(knitr)
slidify(fname)
fname <- gsub(".Rmd", ".html", fname)
system(sprintf('open %s', fname))
}
slide("index.Rmd")
slide("index.Rmd")
